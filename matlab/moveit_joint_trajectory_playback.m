% whole_body_controller.m
% Entry script to validate whole-body trajectories and controllers in MATLAB.

clear; clc;

thisDir = fileparts(mfilename('fullpath'));
addpath(thisDir);

% Example: load a trajectory struct saved from ROS (replace with your data)
% traj = load('sample_whole_body_traj.mat');
% joint_traj = traj.joint_traj;

% For demo, fabricate a small trajectory with 5 points
joint_traj.joint_names = {'world_joint/x','world_joint/y','world_joint/theta', ...
                          'left_arm_joint1','left_arm_joint2','left_arm_joint3', ...
                          'left_arm_joint4','left_arm_joint5','left_arm_joint6'};
joint_traj.points = struct('time_from_start', num2cell(linspace(0,4,5)), ...
                           'positions', { ...
                               [0.0, 0.0, 0.0, 0, 1.0, -1.0, 0.5, 0.0, 0.0], ...
                               [0.3, 0.0, 0.0, 0.1, 1.1, -0.9, 0.5, 0.05, 0.02], ...
                               [0.6, 0.05, 0.1, 0.2, 1.2, -0.8, 0.55, 0.1, 0.04], ...
                               [0.9, 0.12, 0.15, 0.25, 1.25, -0.75, 0.6, 0.15, 0.06], ...
                               [1.2, 0.2, 0.2, 0.3, 1.3, -0.7, 0.65, 0.2, 0.08] ...
                           });

limits = struct('v_max', 0.6, ...
                'omega_max', 1.2, ...
                'a_long_max', 0.8, ...
                'alpha_max', 2.0, ...
                'lat_acc_max', 0.5, ...
                'kappa_max', 2.0);
tracker_cfg = struct('lookahead', 0.4, ...
                     'v_nominal', 0.4, ...
                     'k_v', 1.0, ...
                     'stop_tol_xy', 0.02, ...
                     'stop_tol_yaw_deg', 1.0, ...
                     'lat_error_gain', 1.0);

[planar_traj, arm_traj] = split_trajectory(joint_traj);

armWaypoints = vertcat(arm_traj.points.positions);
armLimitCfg = arm_joint_limits();
[armTimes, armPos, armVel] = helpers.retime_joint_trajectory(armWaypoints, ...
    MaxVelocity=armLimitCfg.velocity, MaxAcceleration=armLimitCfg.acceleration, ...
    TimeStep=0.05, MinSegmentTime=0.2);

helpers.plot_joint_trajectories(armTimes, armPos, arm_traj.joint_names);

[v_cmd, omega_cmd, tracker_state] = diff_drive_tracker(planar_traj, limits, tracker_cfg);

arm_cmd = arm_joint_controller(arm_traj);

fprintf('Generated %d base commands and %d arm waypoints.\n', numel(v_cmd), numel(arm_cmd));

helpers.plot_planar_path(planar_traj, tracker_state);
